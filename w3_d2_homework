# # Q1. Where are we instantiating instances of the Property class?
#     in console.rb when we write property1 = PropertyListing.new and write it as a hash
#
# #
# # Q2. Where are we defining the SQL that enables us to save the ruby Property object into the database?
#     in the property.rb file when we define the 'save' method on the line that says sql=
# #
# # Q3. In console.rb, which lines modify the database?
#         13, 22, 31, 33 (the lines that call the methods with .save, .delete)
#
# # Q4. Why do we not define the id of a Property object at the point we instantiate it (‘new it up’)?
#     because we need the database to assign the id rather than hardcode/set it ourselves. also it changes each time we reload the database
# #
# # Q5. Where and how do we assign the id (that is generated by the database) to the ruby Property object?
#     #in property.rb line 32 do this method to the database    @id = db.exec_prepared("save", values)[0]["id"]
      # which returns an array of hashes, we look at the first hash in position[0] and then looks for id key
#     after we do that, we put the @id in the initialize which can then be read
#
# # Q6. Why do we put a guard (an if clause) on the @id attribute in the constructor?
#       because the if the id doesn't exist it will return nil(set to an integer becomes 0), this guard
#       makes sure the id is only returned if it actually exists
# #
# Q7. Why are some of the CRUD actions represented by instance methods, and others by class methods?

      # instance methods run on only certain objects or instances
      # class methods run on the entire class

#
# Q8. What type of data structure is returned by calls to db.exec_prepared()? In the save method, how do we access the id from the returned data structure?
          # an array, in this case an array filled with hashse. we access it by doing this:   @id = db.exec_prepared("save", values)[0]["id"]
          # which means we access it by drilling into the array [position] and then the id

#
# Q9. Why do we use prepared statements when performing database operations?
      # to sanitize the database and protect against sql injections aka people typing in evil code trying to hurt/destroy the database
